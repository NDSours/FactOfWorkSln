@page
@model ListModel
@{ Layout = "Roles/_Layout";}

<table class="table table-sm table-bordered">
    <tr>
        <th>ID</th>
        <th>Наименование</th>
        <th>Участники</th>
    </tr>
    @if (Model.Roles.Count() == 0)
    {
        <tr>
            <td colspan="4" class="text-center">Роли не созданы</td>
        </tr>
    }
    else
    {
        foreach (var role in Model.Roles)
        {
            <tr>
                <td>@role.Id</td>
                <td>@role.Name</td>
                <td>@(await Model.GetMembersString(role.Name))</td>
                <td class="text-center">
                    <form asp-page="/Roles/List" method="post">
                        <input type="hidden" name="Id" value="@role.Id" />
                        <a class="btn btn-sm btn-warning" asp-page="/Roles/Editor" asp-route-id="@role.Id" asp-route-mode="edit">Редактировать</a>
                        <button type="submit" class="btn btn-sm btn-danger">Удалить</button>
                    </form>
                </td>
            </tr>
        }
    }
</table>
<a class="btn btn-primary" asp-page="/Roles/Create">Создать</a>
<a class="btn btn-secondary" asp-controller="Home" asp-action="Index">На главную</a>

@functions{
    [Authorize(Roles = "Администратор")]
    public class ListModel : UserPageModel
    {
        public UserManager<AppUser> UserManager;
        public RoleManager<IdentityRole> RoleManager;

        public ListModel(UserManager<AppUser> userManager, RoleManager<IdentityRole> roleManager)
        {
            UserManager = userManager;
            RoleManager = roleManager;
        }

        public IEnumerable<IdentityRole> Roles { get; set; }

        public void OnGet()
        {
            Roles = RoleManager.Roles;
        }

        public string GetMembersString(string role)
        {
            //IEnumerable<AppUser> users = UserManager;
            //string result = users.Count() == 0 ? "Нет участников" : string.Join(", ", users.Take(3).Select(u => u.UserName).ToArray());
            //return users.Count() > 3 ? $"{result}, и другие" : result;
            return "";
        }

        public async Task<IActionResult> OnPostAsync(string id)
        {
            IdentityRole role = await RoleManager.FindByIdAsync(id);
            await RoleManager.DeleteAsync(role);
            return RedirectToPage();
        }
    }

}