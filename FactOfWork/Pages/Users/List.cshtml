@page
@model ListModel
@{ Layout = "Users/_Layout";}

<table class="table table-sm table-bordered text-center">
    <tr>
        <th>Имя пользователя</th>
        <th>Ф.И.О.</th>
        <th>Должность</th>
        <th>Отдел</th>
        <th>Роли</th>
        <th></th>
    </tr>
    @if (Model.Users.Count() == 0)
    {
        <tr>
            <td colspan ="6" class="text-center">Нет пользователей</td>
        </tr>
    }
    else
    {
        foreach (var user in Model.Users)
        {
            <tr>
                <td>@user.UserName</td>
                <td>@user.GetFIO()</td>
                <td>@user.Position</td>
                <td>@user.Department</td>
                <td></td>
                <td class="text-center">
                    <form asp-page="List" method="post">
                        <input type="hidden" name="Id" value="@user.Id"/>
                        <a class="btn btn-sm btn-warning" asp-page="/Users/Edit" asp-route-id="@user.Id" asp-route-mode="edit">Редактировать</a>
                        <button type="submit" class="btn btn-sm btn-danger">Удалить</button>
                    </form>
                </td>
            </tr>
        }
    }
</table>
<a class="btn btn-primary" asp-page="create">Создать</a>
<a class="btn btn-secondary" asp-controller="Home" asp-action="Index">На главную</a>
@functions
{
    [Authorize(Roles = "Администратор")]
    public class ListModel : UserPageModel
    {
        public UserManager<AppUser> UserManager;
        public ListModel(UserManager<AppUser> userManager) => UserManager = userManager;
        public IEnumerable<AppUser> Users { get; set; }

        public void OnGet()
        {
            Users = UserManager.Users;
        }

        public async Task<IActionResult> OnPostAsync(string id)
        {
            AppUser user = await UserManager.FindByIdAsync(id);
            if (user != null)
            {
                await UserManager.DeleteAsync(user);
            }
            return RedirectToPage();
        }
    }
}
